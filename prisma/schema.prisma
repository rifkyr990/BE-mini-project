generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique @db.VarChar(255)
  password        String
  name            String
  isVerified      Boolean @default(false)
  role            Role
  profileImage    String? // URL
  referralCode    String   @unique @default(uuid())
  referredById    String?
  referredBy      User?    @relation("Referrals", fields: [referredById], references: [id])
  referrals       User[]   @relation("Referrals")
  points          Point[]
  coupons         Coupon[]
  transactions    Transaction[]
  attendees       Attendee[]
  passwordResets  PasswordResetToken[]
  emailVerificationTokens   EmailVerificationToken[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  eventsOrganized Event[]  @relation("EventOrganizer")
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Point {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  amount    Int
  source    PointSource
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Coupon {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  type      CouponType
  value     Int
  expiresAt DateTime
  used      Boolean    @default(false)
  usedAt    DateTime?
  event     Event?     @relation(fields: [eventId], references: [id])
  eventId   String?
  createdAt DateTime   @default(now())
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  banner      String?
  date        DateTime
  location    String?
  type        String?
  capacity    Int
  seatsTaken  Int       @default(0)
  organizer   User      @relation("EventOrganizer", fields: [organizerId], references: [id])
  organizerId String
  coupons     Coupon[]
  transactions Transaction[]
  attendees   Attendee[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transaction {
  id         String            @id @default(uuid())
  user       User              @relation(fields: [userId], references: [id])
  userId     String
  event      Event             @relation(fields: [eventId], references: [id])
  eventId    String
  ticketQty  Int
  totalPrice Int
  proofImage String?
  usedPoints Int?
  status     TransactionStatus @default(PENDING)
  createdAt  DateTime          @default(now())
}

model Attendee {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
  ticketQty  Int
  totalPaid  Int
  createdAt  DateTime @default(now())
}

model PasswordResetToken {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

enum Role {
  CUSTOMER
  ORGANIZER
}

enum CouponType {
  DISCOUNT 
  VOUCHER 
}

enum TransactionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PointSource {
  REFERRAL
  EVENT
  PROMOTION
}
